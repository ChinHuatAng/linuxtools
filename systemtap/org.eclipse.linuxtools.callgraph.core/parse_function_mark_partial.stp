global markedMessages

probe begin{
	printf("\nPROBE_BEGIN\n")
	printf("0<")
	funcName[0] = "init"
	serial++
	exitCalled = 0
	start[0] = gettimeofday_ns()
}


/*HANDLE CASE WHEN AN EXIT() IS MADE*/
probe syscall.exit{
	if (target() == pid()){	
		exitCalled = 1
	}
}

function callFunction(probefunc) {

	start[serial] = gettimeofday_ns()
	
	if (!isinstr(probefunc,"___STAP_MARKER___") && !(isinstr(probefunc,"(")) && !(isinstr(probefunc,")")) ) {
		currentLevel++
		currentlyIn[currentLevel] = serial
		
			
		/*RELATED TO MEASURING TOTAL TIME A FUNCTION TAKES */
		if (nested[probefunc] == 0){
	                start_total[probefunc] = start_total[probefunc] - gettimeofday_ns()
	        }
	        nested[probefunc]++
	
	
		/*TRACK THE DEPTH OF A FUNCTION*/
		depth[serial] = val
		printf("%d<",serial)
	
	
		/*RECORD NAME OF THE FUNCTION*/
		funcName[serial] = probefunc
		/*TALLY NUMBER OF USES OF FUNCTION*/
	
		val++
		serial++
	}
}

function returnFunction(probefunc) {
	if (!isinstr(probefunc,"___STAP_MARKER___") && !(isinstr(probefunc,"(")) && !(isinstr(probefunc,")")) ) {
		val--
		currentLevel--
	
		/*IF WE ARE BACK TO THE DEPTH OF ANY FUNCTION WE HAVE RETURNED FROM IT*/
		foreach (ser in depth)
			if (depth[ser] == val){
				total[ser] = gettimeofday_ns() - start[ser]
				delete start[ser]
			}
			/*PREVENT CHANGING THE TIME OF THIS FUNCTION ONCE FOUND*/
			delete depth[ser]
	
	        /*RELATED TO MEASURING TOTAL TIME A FUNCTION TAKES */
	        if (nested[probefunc] == 1){
	                start_total[probefunc] = start_total[probefunc] + ( gettimeofday_ns() )
	        }
	
		printf(">")
	
		/*RELATED TO MEASURING TOTAL TIME A FUNCTION TAKES */
	        nested[probefunc]--
    }
}

probe process(@1).function("___STAP_MARKER___").call {
	markedMessages[fc]=user_string($stapMarker)
}

probe end{
	total[0] = gettimeofday_ns() - start[0]
	start_total["init"] = total[0]

	/*IF EXIT() WAS CALLED TALLY TIME FOR FUNCTIONS THAT DID NOT RETURN*/
	if (exitCalled == 1){
		foreach (fc in funcName){
			if (total[fc] == 0){
				total[fc] = gettimeofday_ns() - start[fc]
			}
		}
		
		foreach (fd in nested){
			if (start_total[fd] < 0){
				start_total[fd] = start_total[fd] + (nested[fd] * gettimeofday_ns())
			}
		}
	}

	printf(">")

	printf("\n")

	foreach (fa in funcName)
                printf("%d:%s;", fa, funcName[fa])

	printf("\n")

	foreach (ser in total)
		printf("%d:%d;", ser, total[ser])

	printf("\n")

	foreach (fn in start_total) {
				if (start_total[fn] > 0)
                	printf("%s:%d;", fn, start_total[fn])
    }
                
    printf("\n")
    
    foreach (fc in markedMessages) {
    	printf("%d:%s;", fc, markedMessages[fc])
    }
    printf("\n")
    exit()
}
